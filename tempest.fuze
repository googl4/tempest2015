debugKeys = false
xres = 640
yres = 480
maxxres = 1920
maxyres = 1080
minfps = 25
maxfps = 35
isMaxResolution = false
totalFrames = 0
updatemode = 0
setmode( xres, yres )
fontscale( 4, 4 )
maxStars = 100
dim stars( maxStars )
dim starsSpeed( maxStars )
dim starsDist( maxStars )
starX = 0
starY = 0
laserX = 0
laserY = 0
laserX2 = 0
laserY2 = 0
laserX3 = 0
laserY3 = 0
laserX4 = 0
laserY4 = 0
frames = 0
oldTime = 0
maxLasers = 10
totalFrames = 0
laserReload = 20
laserCount = 0
dim laserDist( maxLasers )
dim laserAngle( maxLasers )
dim laserSide( maxLasers )
particleLaserSide = 0
maxEnemies = 5
numEnemies = 0
enemyX = 0
enemyY = 0
enemyDelay = 100
enemyCount = enemyDelay
dim enemyAngle( maxEnemies )
dim enemyDist( maxEnemies )
dim enemyMove( maxEnemies )
dim enemyHealth( maxEnemies )
playerAngle = 0
oldPlayerAngle = playerAngle
oneTimeInit = true
score = 0
enemies = true
debugDelay = 10
debugCount = 0
messageCount = 0
message$ = ""
oldScore = 0
scoreTime = 0
scoreBoost = 1
dim oldPowerupColour( 3 )
oldPowerupColour( 0 ) = 255
oldPowerupColour( 1 ) = 255
oldPowerupColour( 2 ) = 255
dim powerupColour( 3 )
powerupColour( 0 ) = 255
powerupColour( 1 ) = 255
powerupColour( 2 ) = 255
powerupFade = 0
starNum = 0
dim sfx( 9 )
sfx( 0 ) = loadsample( "sfx/Enemy Destroyed_Close.wav" )
sfx( 1 ) = loadsample( "sfx/Enemy Destroyed_Distant.wav" )
sfx( 2 ) = loadsample( "sfx/Enemy Destroyed_Med.wav" )
sfx( 3 ) = loadsample( "sfx/Particle Lazer Last shot.wav" )
sfx( 4 ) = loadsample( "sfx/Particle Lazer Loop.wav" )
sfx( 5 ) = loadsample( "sfx/Player Death Explosion.wav" )
sfx( 6 ) = loadsample( "sfx/Single Lazer Shot.wav" )
sfx( 7 ) = loadsample( "sfx/warp.wav" )
sfx( 8 ) = loadsample( "sfx/powerup.wav" )
synthVortex = loadmusic( "sfx/Synthetic Vortex Master.mp3" )
playmusic( synthVortex, -1 )
highscores = open( "highscores.txt" )
highscore = 0
input# highscores, highscore
maxdebris = 20
dim debris( maxdebris )
dim debrisX( maxdebris )
dim debrisY( maxdebris )
dim debrisSpeedX( maxdebris )
dim debrisSpeedY( maxdebris )
while starNum < maxStars cycle
	stars( starNum ) = rnd( 360 )
	starsSpeed( starNum ) = rnd( 7 ) + 1
	starsDist( starNum ) = rnd( gheight )
	starNum = starNum + 1
repeat
proc setup
cycle
	cls2
	if scankeyboard( scanright ) then
		if moveCount = 0 then
			oldPlayerAngle = playerAngle
			playerAngle = playerAngle + gap
			moveCount = moveDelay
			if playerAngle > 360 then
				playerAngle = gap / 2
			endif
		endif
	endif
	if scankeyboard( scanleft ) then
		if moveCount = 0 then
			oldPlayerAngle = playerAngle
			playerAngle = playerAngle - gap
			moveCount = moveDelay
			if playerAngle < 0 then
				playerAngle = 360 - ( gap / 2 )
			endif
		endif
	endif
	if scankeyboard( scanq ) then
		cls2
		printat( 0, 0 )
		print "Average fps: ";
		print int( totalFrames / ( time / 1000 ) )
		break
	endif
	if scankeyboard( scanspace ) then
		if laserCount = 0 then
			if numLasers < maxLasers then
				for i = 0 to maxLasers cycle
					if laserDist( i ) = radius2 then
						laserDist( i ) = sqrt( ( ( centerX - playerX ) * ( centerX - playerX ) ) + ( ( centerY - playerY ) * ( centerY - playerY ) ) )
						laserAngle( i ) = playerAngle
						laserSide( i ) = particleLaserSide
						if particleLaserSide = 0 then
							particleLaserSide = 1
						else
							particleLaserSide = 0
						endif
						if particleLaser = true then
							playsample( sfx( 4 ), particleLaserSide + 1, 0 )
						else
							playsample( sfx( 6 ), 1, 0 )
						endif
						numLasers = numLasers + 1
						laserCount = laserReload
						break
					endif
				repeat
			endif
		endif
	endif
	if debugKeys = true then
		if debugCount > 0 then
			debugCount = debugCount - 1
		endif
		if debugCount = 0 then
			if scankeyboard( scanp ) then
				powerupAngle = ( rnd( vertices - 1 ) * gap ) + ( gap / 2 )
				powerupDist = radius2
				debugCount = debugDelay
			endif
			if scankeyboard( scans ) then
				if enemies = true then
					enemies = false
				else
					enemies = true
				endif
				debugCount = debugDelay
			endif
			if scankeyboard( scanl ) then
				if particleLaser = true then
					particleLaser = false
				else
					particleLaser = true
				endif
				debugCount = debugDelay
			endif
			if scankeyboard( scanr ) then
				warp = true
				debugCount = debugDelay
			endif
		endif
	endif
	if powerupDist = radius then
		if rnd( 200 ) = 1 then
			powerupAngle = ( rnd( vertices - 1 ) * gap ) + ( gap / 2 )
			powerupDist = radius2
			oldPowerupColour( 0 ) = powerupColour( 0 )
			oldPowerupColour( 1 ) = powerupColour( 1 )
			oldPowerupColour( 2 ) = powerupColour( 2 )
			powerupColour( 0 ) = rnd( 200 ) + 55
			powerupColour( 1 ) = rnd( 200 ) + 55
			powerupColour( 2 ) = rnd( 200 ) + 55
			powerupFade = 0
		endif
	endif
	if powerupDist < radius then
		powerupDist = powerupDist + ( radius / 60 )
	endif
	if powerupDist > radius then
		if powerupAngle > playerAngle - ( gap / 2 ) then
			if powerupAngle < playerAngle + ( gap / 2 ) then
				playsample( sfx( 8 ), 3, 0 )
				if particleLaser = false then
					particleLaser = true
					message$ = "Particle Laser!"
					messageCount = 30
					laserCount = laserReload
				else
					scoreBoost = scoreBoost + 1
					score = score + ( 10 * scoreBoost )
					message$ = "Score Boost!"
					messageCount = 30
				endif
			endif
		endif
		powerupDist = radius
	endif
	if warp = true then
		radius = radius + ( gheight / 10 )
		radius2 = radius2 + ( gheight / 20 )
		if radius2 > gheight then
			proc setup
		endif
	endif
	if particleLaser = false then
		if laserCount > 0 then
			laserCount = laserCount - 1
		endif
	else
		if laserCount > 0 then
			laserCount = laserCount - 4
		endif
	endif
	if enemies = true then
		if enemyCount > 0 then
			enemyCount = enemyCount - 1
		else
			if enemyCount = 0 then
				if numEnemies < maxEnemies then
					for i = 0 to maxEnemies cycle
						if enemyDist( i ) = radius then
							enemyDist( i ) = radius2
							enemyAngle( i ) = ( rnd( vertices - 1 ) * gap ) + ( gap / 2 )
							enemyHealth( i ) = 100
							numEnemies = numEnemies + 1
							enemyCount = enemyDelay
							break
						endif
					repeat
				endif
			endif
		endif
	endif
	colour = white
	while starNum < maxStars cycle
		starX = starsDist( starNum ) * cos( stars( starNum ) )
		starX = starsCenterX + starX
		starY = starsDist( starNum ) * sin( stars( starNum ) )
		starY = starsCenterY + starY
		starsDist( starNum ) = starsDist( starNum ) + starsSpeed( starNum )
		if starX < 0 then
			starsDist( starNum ) = 20
		endif
		if starX > gwidth then
			starsDist( starNum ) = 20
		endif
		if starY < 0 then
			starsDist( starNum ) = 20
		endif
		if starY > gheight then
			starsDist( starNum ) = 20
		endif
		plot( starX, starY )
		starNum = starNum + 1
	repeat
	starNum = 0
	while angle < 360 cycle
		x = radius * cos( angle )
		x = centerX + x
		y = radius * sin( angle )
		y = centerY + y
		x2 = radius2 * cos( angle )
		x2 = centerX2 + x2
		y2 = radius2 * sin( angle )
		y2 = centerY2 + y2
		colour = blue
		line( x, y, x2, y2 )
		line( x, y, oldX, oldY )
		line( x2, y2, oldX2, oldY2 )
		oldX = x
		oldY = y
		oldX2 = x2
		oldY2 = y2
		angle = angle + gap
	repeat
	tmpPlayerAngle = fn lerp( playerAngle, oldPlayerAngle, moveCount / moveDelay )
	if warp = false then
		playerX = ( ( ( radius * cos( tmpPlayerAngle - ( gap / 2 ) ) ) + centerX ) + ( ( radius * cos( tmpPlayerAngle + ( gap / 2 ) ) ) + centerX ) ) / 2
		playerY = ( ( ( radius * sin( tmpPlayerAngle - ( gap / 2 ) ) ) + centerY ) + ( ( radius * sin( tmpPlayerAngle + ( gap / 2 ) ) ) + centerY ) ) / 2
	endif
	angle = 0
	if moveCount > 0 then
		moveCount = moveCount - 1
	endif
	if playerX + 4 < gwidth / 2 then
		if centerX < ( gwidth / 2 ) + ( gwidth / 20 ) then
			centerX = centerX + 8
			centerX2 = centerX2 + 4
		endif
	endif
	if playerX - 4 > gwidth / 2 then
		if centerX > ( gwidth / 2 ) - ( gwidth / 20 ) then
			centerX = centerX - 8
			centerX2 = centerX2 - 4
		endif
	endif
	if playerY + 4 < gheight / 2 then
		if centerY < ( gheight / 2 ) + ( gheight / 20 ) then
			centerY = centerY + 8
			centerY2 = centerY2 + 4
		endif
	endif
	if playerY - 4 > gheight / 2 then
		if centerY > ( gheight / 2 ) - ( gheight / 20 ) then
			centerY = centerY - 8
			centerY2 = centerY2 - 4
		endif
	endif
	if warp = false then
		if powerupDist < radius then
			powerupFade = powerupFade + 0.2
			rgbcolour( fn lerp( oldPowerupColour( 0 ), powerupColour( 0 ), powerupFade ), fn lerp( oldPowerupColour( 1 ), powerupColour( 1 ), powerupFade ), fn lerp( oldPowerupColour( 2 ), powerupColour( 2 ), powerupFade ) )
			if powerupFade = 1 then
				oldPowerupColour( 0 ) = powerupColour( 0 )
				oldPowerupColour( 1 ) = powerupColour( 1 )
				oldPowerupColour( 2 ) = powerupColour( 2 )
				powerupColour( 0 ) = rnd( 200 ) + 55
				powerupColour( 1 ) = rnd( 200 ) + 55
				powerupColour( 2 ) = rnd( 200 ) + 55
				powerupFade = 0
			endif
			cX = fn lerp( centerX2, centerX, powerupDist / radius )
			cY = fn lerp( centerY2, centerY, powerupDist / radius )
			powerupX = ( ( ( powerupDist * cos( powerupAngle - ( gap / 2 ) ) ) + cX ) + ( ( powerupDist * cos( powerupAngle + ( gap / 2 ) ) ) + cX ) ) / 2
			powerupY = ( ( ( powerupDist * sin( powerupAngle - ( gap / 2 ) ) ) + cY ) + ( ( powerupDist * sin( powerupAngle + ( gap / 2 ) ) ) + cY ) ) / 2
			c = cos( powerupAngle + 45 )
			s = sin( powerupAngle + 45 )
			u = powerupDist / 15
			polystart
				polyplot( ( u*2 * c ) - ( u*2 * s ) + powerupX, ( u*2 * s ) + ( u*2 * c ) + powerupY )
				polyplot( ( u*2 * c ) - ( u*-2 * s ) + powerupX, ( u*2 * s ) + ( u*-2 * c ) + powerupY )
				polyplot( ( u*-2 * c ) - ( u*-2 * s ) + powerupX, ( u*-2 * s ) + ( u*-2 * c ) + powerupY )
				polyplot( ( u*-2 * c ) - ( u*2 * s ) + powerupX, ( u*-2 * s ) + ( u*2 * c ) + powerupY )
			polyend
		endif
		colour = aqua
		for i = 0 to maxLasers cycle
			if laserDist( i ) > radius2 then
				cX = fn lerp( centerX2, centerX, laserDist( i ) / radius )
				cY = fn lerp( centerY2, centerY, laserDist( i ) / radius )
				if particleLaser = false then
					laserX = ( ( laserDist( i ) * 0.9 ) * cos( laserAngle( i ) ) ) + cX
					laserY = ( ( laserDist( i ) * 0.9 ) * sin( laserAngle( i ) ) ) + cY
					laserX2 = ( ( laserDist( i ) ) * cos( laserAngle( i ) + 5 ) ) + cX
					laserY2 = ( ( laserDist( i ) ) * sin( laserAngle( i ) + 5 ) ) + cY
					laserX3 = ( ( laserDist( i ) * 1.1 ) * cos( laserAngle( i ) ) ) + cX
					laserY3 = ( ( laserDist( i ) * 1.1 ) * sin( laserAngle( i ) ) ) + cY
					laserX4 = ( ( laserDist( i ) ) * cos( laserAngle( i ) - 5 ) ) + cX
					laserY4 = ( ( laserDist( i ) ) * sin( laserAngle( i ) - 5 ) ) + cY
				else
					if laserSide( i ) = 0 then
						laserX = ( ( laserDist( i ) * 0.95 ) * cos( laserAngle( i ) - ( gap / 4 ) ) ) + cX
						laserY = ( ( laserDist( i ) * 0.95 ) * sin( laserAngle( i ) - ( gap / 4 ) ) ) + cY
						laserX2 = ( ( laserDist( i ) ) * cos( laserAngle( i ) + 1 - ( gap / 4 ) ) ) + cX
						laserY2 = ( ( laserDist( i ) ) * sin( laserAngle( i ) + 1 - ( gap / 4 ) ) ) + cY
						laserX3 = ( ( laserDist( i ) * 1.05 ) * cos( laserAngle( i ) - ( gap / 4 ) ) ) + cX
						laserY3 = ( ( laserDist( i ) * 1.05 ) * sin( laserAngle( i ) - ( gap / 4 ) ) ) + cY
						laserX4 = ( ( laserDist( i ) ) * cos( laserAngle( i ) - 1 - ( gap / 4 ) ) ) + cX
						laserY4 = ( ( laserDist( i ) ) * sin( laserAngle( i ) - 1 - ( gap / 4 ) ) ) + cY
					else
						laserX = ( ( laserDist( i ) * 0.95 ) * cos( laserAngle( i ) + ( gap / 4 ) ) ) + cX
						laserY = ( ( laserDist( i ) * 0.95 ) * sin( laserAngle( i ) + ( gap / 4 ) ) ) + cY
						laserX2 = ( ( laserDist( i ) ) * cos( laserAngle( i ) + 1 + ( gap / 4 ) ) ) + cX
						laserY2 = ( ( laserDist( i ) ) * sin( laserAngle( i ) + 1 + ( gap / 4 ) ) ) + cY
						laserX3 = ( ( laserDist( i ) * 1.05 ) * cos( laserAngle( i ) + ( gap / 4 ) ) ) + cX
						laserY3 = ( ( laserDist( i ) * 1.05 ) * sin( laserAngle( i ) + ( gap / 4 ) ) ) + cY
						laserX4 = ( ( laserDist( i ) ) * cos( laserAngle( i ) - 1 + ( gap / 4 ) ) ) + cX
						laserY4 = ( ( laserDist( i ) ) * sin( laserAngle( i ) - 1 + ( gap / 4 ) ) ) + cY
					endif
				endif
				line( laserX, laserY, laserX2, laserY2 )
				line( laserX2, laserY2, laserX3, laserY3 )
				line( laserX3, laserY3, laserX4, laserY4 )
				line( laserX4, laserY4, laserX, laserY )
				laserDist( i ) = laserDist( i ) - ( radius / 60 )
				for e = 0 to maxEnemies cycle
					if laserDist( i ) < radius then
						if laserDist( i ) < enemyDist( e ) then
							if laserAngle( i ) < enemyAngle( e ) + ( gap / 2 ) then
								if laserAngle( i ) > enemyAngle( e ) - ( gap / 2 ) then
									if enemyDist( e ) < radius then
										laserDist( i ) = radius2
										numLasers = numLasers - 1
										if particleLaser = true then
											enemyHealth( e ) = enemyHealth( e ) - 50
										else
											enemyHealth( e ) = enemyHealth( e ) - 100
										endif
										if enemyHealth( e ) < 1 then
											for w = 0 to maxdebris loop
												if debris( w ) = 0 then
													debris( w ) = 20
													cX = fn lerp( centerX2, centerX, enemyDist( e ) / radius )
													cY = fn lerp( centerY2, centerY, enemyDist( e ) / radius )
													enemyX = ( ( ( enemyDist( e ) * cos( enemyAngle( e ) - ( gap / 2 ) ) ) + cX ) + ( ( enemyDist( e ) * cos( enemyAngle( e ) + ( gap / 2 ) ) ) + cX ) ) / 2
													enemyY = ( ( ( enemyDist( e ) * sin( enemyAngle( e ) - ( gap / 2 ) ) ) + cY ) + ( ( enemyDist( e ) * sin( enemyAngle( e ) + ( gap / 2 ) ) ) + cY ) ) / 2
													debrisX( w ) = enemyX
													debrisY( w ) = enemyY
													debrisSpeedX( w ) = rnd( gheight / 100 ) - gheight / 200
													debrisSpeedY( w ) = rnd( gheight / 100 ) - gheight / 200
												endif
											repeat
											enemyDist( e ) = radius
											numEnemies = numEnemies - 1
											oldScore = score
											scoreTime = 1
											score = score + ( 10 * scoreBoost )
											if enemyDist( e ) < ( radius - radius2 ) / 3 then
												playsample( sfx( 1 ), 0, 0 )
											else
												if enemyDist( e ) > ( ( radius - radius2 ) / 3 ) * 2 then
													playsample( sfx( 0 ), 0, 0 )
												else
													playsample( sfx( 2 ), 0, 0 )
												endif
											endif
											if enemyDelay > 10 then
												enemyDelay = enemyDelay - 1
											endif
											break
										endif
									endif
								endif
							endif
						endif
					endif
				repeat
			endif
			if laserDist( i ) < radius2 then
				laserDist( i ) = radius2
				numLasers = numLasers - 1
			endif
		repeat
		colour = red
		for i = 0 to maxEnemies cycle
			if enemyDist( i ) = radius then
			else
				cX = fn lerp( centerX2, centerX, enemyDist( i ) / radius )
				cY = fn lerp( centerY2, centerY, enemyDist( i ) / radius )
				enemyX = ( ( ( enemyDist( i ) * cos( enemyAngle( i ) - ( gap / 2 ) ) ) + cX ) + ( ( enemyDist( i ) * cos( enemyAngle( i ) + ( gap / 2 ) ) ) + cX ) ) / 2
				enemyY = ( ( ( enemyDist( i ) * sin( enemyAngle( i ) - ( gap / 2 ) ) ) + cY ) + ( ( enemyDist( i ) * sin( enemyAngle( i ) + ( gap / 2 ) ) ) + cY ) ) / 2
				c = cos( enemyAngle( i ) + 90 )
				s = sin( enemyAngle( i ) + 90 )
				u = enemyDist( i ) / 20
				polystart
					polyplot( ( u*-5 * c ) - ( u*1.5 * s ) + enemyX, ( u*-5 * s ) + ( u*1.5 * c ) + enemyY )
					polyplot( 0 - ( u*0.5 * s ) + enemyX, ( u*0.5 * c ) + enemyY )
					polyplot( ( u*5 * c ) - ( u*1.5 * s ) + enemyX, ( u*5 * s ) + ( u*1.5 * c ) + enemyY )
					polyplot( u * c + enemyX, u * s + enemyY )
					polyplot( ( u*5 * c ) - ( u*-1.5 * s ) + enemyX, ( u*5 * s ) + ( u*-1.5 * c ) + enemyY )
					polyplot( 0 - ( u*-0.5 * s ) + enemyX, ( u*-0.5 * c ) + enemyY )
					polyplot( ( u*-5 * c ) - ( u*-1.5 * s ) + enemyX, ( u*-5 * s ) + ( u*-1.5 * c ) + enemyY )
					polyplot( ( u*-1 * c ) + enemyX, ( u*-1 * s ) + enemyY )
				polyend
			endif
			if enemyDist( i ) < radius then
				enemyDist( i ) = enemyDist( i ) + ( radius / 120 )
			endif
			if enemyDist( i ) = radius + 1 then
				if enemyAngle( i ) > playerAngle - ( gap / 2 ) then
					if enemyAngle( i ) < playerAngle + ( gap / 2 ) then
						playsample( sfx( 5 ), 3, 0 )
						printat( twidth / 2 - 5, theight / 2 - 1 )
						print "Game Over!"
						printat( twidth / 2 - 5, theight / 2 + 1 )
						print "Score: ";
						print score
						printat( twidth / 2 - 5, theight / 2 + 3 )
						if score > highscore then
							print "NEW HIGH SCORE!"
							rewind( highscores )
							print#( highscores ), score
						else
							print "high score: ";
							print highscore
						endif
						update
						wait( 2 )
						stopmusic
						end
					endif
				endif
				if enemyMove( i ) > 0 then
					enemyMove( i ) = enemyMove( i ) - 1
				endif
				if enemyMove( i ) = 0 then
					if enemyAngle( i ) > playerAngle then
						enemyAngle( i ) = enemyAngle( i ) - ( gap / 2 )
						enemyMove( i ) = moveDelay * 2
					endif
					if enemyAngle( i ) < playerAngle then
						enemyAngle( i ) = enemyAngle( i ) + ( gap / 2 )
						enemyMove( i ) = moveDelay * 2
					endif
				endif
			else
				if enemyDist( i ) > radius then
					enemyDist( i ) = radius + 1
				endif
			endif
		repeat
	endif
	colour = yellow
	c = cos( tmpPlayerAngle + 90 )
	s = sin( tmpPlayerAngle + 90 )
	u = gheight / 80
	polystart
		polyplot( ( u*5 * c ) - ( u*5 * s ) + playerX, ( u*5 * s ) + ( u*5 * c ) + playerY )
		polyplot( ( u*5 * c ) - 0 + playerX, ( u*5 * s ) + playerY )
		polyplot( 0 - ( u*-2 * s ) + playerX, ( u*-2 * c ) + playerY )
		polyplot( ( u*-5 * c ) - 0 + playerX, ( u*-5 * s ) + playerY )
		polyplot( ( u*-5 * c ) - ( u*5 * s ) + playerX, ( u*-5 * s ) + ( u*5 * c ) + playerY )
		polyplot( ( u*-7 * c ) - 0 + playerX, ( u*-7 * s ) + playerY )
		polyplot( 0 - ( u*-4 * s ) + playerX, ( u*-4 * c ) + playerY )
		polyplot( ( u*7 * c ) - 0 + playerX, ( u*7 * s ) + playerY )
	polyend
	if score > 100 then
		if score mod 1000 < 100 then
			playsample( sfx( 7 ), 4, 0 )
			oldScore = score
			score = score + ( 10 * scoreBoost )
			scoreTime = 1
			warp = true
		endif
	endif
	if warp = false then
		colour = red
		for i = 0 to maxdebris loop
			if debris( i ) > 0 then
				debris( i ) = debris( i ) - 1
				debrisX( i ) = debrisX( i ) + debrisSpeedX( i )
				debrisY( i ) = debrisY( i ) + debrisSpeedY( i )
				plot( debrisX( i ), debrisY( i ) )
			endif
		repeat
	endif
	if frames mod 3 = 0 then
		ink = rnd( 14 ) + 1
	endif
	printat( 0, 0 )
	if scoreTime > 0.1 then
		scoreTime = scoreTime - 0.1
	endif
	print fn lerp( score, oldScore, scoreTime )
	if messageCount > 0 then
		fontscale( 6, 6 )
		printat( twidth / 2 - 7, theight / 2 )
		ink = rnd( 14 ) + 1
		print message$
		messageCount = messageCount - 1
		fontscale( 4, 4 )
	endif
	update
	frames = frames + 1
	if time - 1000 > oldTime then
		if frames < minfps then
			yres = yres - ( ( 10 * ( minfps - frames ) ) * ( yres / xres ) )
			xres = xres - ( 10 * ( minfps - frames ) )
			setmode( xres, yres )
			fontscale( 4, 4 )
			centerX = gwidth / 2
			centerY = gheight / 2
			centerX2 = centerX
			centerY2 = centerY
			starsCenterX = centerX
			starsCenterY = centerY
			oldRadius = radius
			oldRadius2 = radius2
			radius = gheight / 2 - 50
			radius2 = gheight / 8
			enemyCount = enemyDelay
			for i = 0 to maxLasers cycle
				if laserDist( i ) = oldRadius2 then
					laserDist( i ) = radius2
				endif
			repeat
			for i = 0 to maxEnemies cycle
				if enemyDist( i ) = oldRadius then
					enemyDist( i ) = radius
				endif
				if enemyDist( i ) = oldRadius + 1 then
					enemyDist( i ) = radius + 1
				endif
			repeat
		endif
		if frames > maxfps then
			if yres < maxyres then
				yres = yres + ( ( 10 * ( frames - maxfps ) ) * ( yres / xres ) )
				if yres > maxyres then
					yres = maxyres
				endif
			endif
			if xres < maxxres then
				xres = xres + ( 10 * ( frames - maxfps ) )
				if xres > maxxres then
					xres = maxxres
				endif
			endif
			if isMaxResolution = false then
				setmode( xres, yres )
				fontscale( 4, 4 )
				centerX = gwidth / 2
				centerY = gheight / 2
				centerX2 = centerX
				centerY2 = centerY
				starsCenterX = centerX
				starsCenterY = centerY
				oldRadius = radius
				oldRadius2 = radius2
				radius = gheight / 2 - 50
				radius2 = gheight / 8
				powerupDist = ( oldRadius / powerupDist ) * radius
				if powerupDist = oldRadius then
					powerupDist = radius
				endif
				enemyCount = enemyDelay
				for i = 0 to maxLasers cycle
					if laserDist( i ) = oldRadius2 then
						laserDist( i ) = radius2
					endif
				repeat
				for i = 0 to maxEnemies cycle
					if enemyDist( i ) = oldRadius then
						enemyDist( i ) = radius
					endif
					if enemyDist( i ) = oldRadius + 1 then
						enemyDist( i ) = radius + 1
					endif
				repeat
				if xres = maxxres then
					if yres = maxyres then
						isMaxResolution = true
						fullscreen = true
					else
						fullscreen = false
					endif
				else
					fullscreen = false
				endif
			endif
		endif
		frames = 0
		oldTime = time
	endif
	totalFrames = totalFrames + 1
	if scankeyboard( scanq ) then
		printat( 0, 0 )
		fontscale( 2, 2 )
		print "Average fps: ";
		print int( totalFrames / ( time / 1000 ) )
		break
	endif
repeat
end

def proc setup
	warp = false
	x = 0
	y = 0
	x2 = 0
	y2 = 0
	oldX = 0
	oldY = 0
	oldX2 = 0
	oldY2 = 0
	angle = 0
	particleLaser = false
	powerupAngle = 0
	powerupDist = 0
	while playerAngle > 360 cycle
		playerAngle = playerAngle - 360
	repeat
	while playerAngle < 0 cycle
		playerAngle = 360 + playerAngle
	repeat
	for i = 0 to maxdebris loop
		debris( i ) = 0
	repeat
	if oneTimeInit = false then
		oldPlayerAngle = playerAngle
		playerAngle = playerAngle - ( gap / 2 )
		oldCenterX = centerX
		oldCenterY = centerY
	else
		oldCenterX = gwidth / 2
		oldCenterY = gheight / 2
	endif
	centerX = gwidth / 2
	centerY = gheight / 2
	centerX2 = centerX
	centerY2 = centerY
	starsCenterX = centerX
	starsCenterY = centerY
	radius = gheight / 2 - 50
	radius2 = gheight / 8
	vertices = rnd( 11 ) + 4
	gap = 360 / vertices
	if oneTimeInit = true then
		playerAngle = gap / 2
		oneTimeInit = false
	else
		playerAngle = gap * int( playerAngle / gap )
		playerAngle = playerAngle + ( gap / 2 )
	endif
	intro = 0
	intro2 = 0
	playerX = 0
	playerY = 0
	numEnemies = 0
	moveDelay = int( 40 / vertices )
	moveCount = 0
	powerupDist = radius + 1
	numLasers = 0
	for i = 0 to maxLasers cycle
		laserDist( i ) = radius2
		laserAngle( i ) = 0
	repeat
	for i = 0 to maxEnemies cycle
		enemyDist( i ) = radius
		enemyAngle( i ) = 0
		enemyHealth( i ) = 100
	repeat
	while intro < radius cycle
		cls2
		tmpCenterX = oldCenterX + ( intro / radius ) * ( centerX - oldCenterX )
		tmpCenterY = oldCenterY + ( intro / radius ) * ( centerY - oldCenterY )
		oldX = intro * cos( angle - gap )
		oldX = centerX + oldX
		oldY = intro * sin( angle - gap )
		oldY = centerY + oldY
		oldX2 = intro2 * cos( angle - gap )
		oldX2 = centerX + oldX2
		oldY2 = intro2 * sin( angle - gap )
		oldY2 = centerY + oldY2
		colour = white
		while starNum < maxStars cycle
			starX = starsDist( starNum ) * cos( stars( starNum ) )
			starX = starsCenterX + starX
			starY = starsDist( starNum ) * sin( stars( starNum ) )
			starY = starsCenterY + starY
			starsDist( starNum ) = starsDist( starNum ) + starsSpeed( starNum )
			if starX < 0 then
				starsDist( starNum ) = 10
			endif
			if starX > gwidth then
				starsDist( starNum ) = 10
			endif
			if starY < 0 then
				starsDist( starNum ) = 10
			endif
			if starY > gheight then
				starsDist( starNum ) = 10
			endif
			plot( starX, starY )
			starNum = starNum + 1
		repeat
		starNum = 0
		while angle < 360 cycle
			x = intro * cos( angle )
			x = centerX + x
			y = intro * sin( angle )
			y = centerY + y
			x2 = intro2 * cos( angle )
			x2 = centerX2 + x2
			y2 = intro2 * sin( angle )
			y2 = centerY2 + y2
			colour = blue
			line( x, y, x2, y2 )
			line( x, y, oldX, oldY )
			line( x2, y2, oldX2, oldY2 )
			oldX = x
			oldY = y
			oldX2 = x2
			oldY2 = y2
			angle = angle + gap
		repeat
		angle = 0
		intro = intro + ( radius / 20 )
		intro2 = intro2 + ( radius2 / 20 )
		tmpPlayerAngle = fn lerp( oldPlayerAngle, playerAngle, intro / radius )
		colour = yellow
		playerX = ( ( ( radius * cos( tmpPlayerAngle - ( gap / 2 ) ) ) + tmpCenterX ) + ( ( radius * cos( tmpPlayerAngle + ( gap / 2 ) ) ) + tmpCenterX ) ) / 2
		playerY = ( ( ( radius * sin( tmpPlayerAngle - ( gap / 2 ) ) ) + tmpCenterY ) + ( ( radius * sin( tmpPlayerAngle + ( gap / 2 ) ) ) + tmpCenterY ) ) / 2
		c = cos( tmpPlayerAngle + 90 )
		s = sin( tmpPlayerAngle + 90 )
		u = gheight / 80
		polystart
			polyplot( ( u*5 * c ) - ( u*5 * s ) + playerX, ( u*5 * s ) + ( u*5 * c ) + playerY )
			polyplot( ( u*5 * c ) - ( 0 * s ) + playerX, ( u*5 * s ) + ( 0 * c ) + playerY )
			polyplot( ( 0 * c ) - ( u*-2 * s ) + playerX, ( 0 * s ) + ( u*-2 * c ) + playerY )
			polyplot( ( u*-5 * c ) - ( 0 * s ) + playerX, ( u*-5 * s ) + ( 0 * c ) + playerY )
			polyplot( ( u*-5 * c ) - ( u*5 * s ) + playerX, ( u*-5 * s ) + ( u*5 * c ) + playerY )
			polyplot( ( u*-7 * c ) - ( 0 * s ) + playerX, ( u*-7 * s ) + ( 0 * c ) + playerY )
			polyplot( ( 0 * c ) - ( u*-4 * s ) + playerX, ( 0 * s ) + ( u*-4 * c ) + playerY )
			polyplot( ( u*7 * c ) - ( 0 * s ) + playerX, ( u*7 * s ) + ( 0 * c ) + playerY )
		polyend
		if frames mod 5 = 0 then
			ink = rnd( 14 ) + 1
		endif
		printat( 0, 0 )
		print score
		update
		frames = frames + 1
		if time - 1000 > oldTime then
			if frames < minfps then
				yres = yres - ( ( 10 * ( minfps - frames ) ) * ( yres / xres ) )
				xres = xres - ( 10 * ( minfps - frames ) )
				setmode( xres, yres )
				fontscale( 4, 4 )
				centerX = gwidth / 2
				centerY = gheight / 2
				centerX2 = centerX
				centerY2 = centerY
				starsCenterX = centerX
				starsCenterY = centerY
				oldRadius = radius
				oldRadius2 = radius2
				radius = gheight / 2 - 50
				radius2 = gheight / 8
				for i = 0 to maxLasers cycle
					if laserDist( i ) = oldRadius2 then
						laserDist( i ) = radius2
					endif
				repeat
			endif
			if frames > maxfps then
				if yres < maxyres then
					yres = yres + ( ( 10 * ( frames - maxfps ) ) * ( yres / xres ) )
					if yres  > maxyres then
						yres = maxyres
					endif
				endif
				if xres < maxxres then
					xres = xres + ( 10 * ( frames - maxfps ) )
					if xres > maxxres then
						xres = maxxres
					endif
				endif
				if isMaxResolution = false then
					setmode( xres, yres )
					fontscale( 4, 4 )
					centerX = gwidth / 2
					centerY = gheight / 2
					centerX2 = centerX
					centerY2 = centerY
					starsCenterX = centerX
					starsCenterY = centerY
					oldRadius = radius
					oldRadius2 = radius2
					radius = gheight / 2 - 50
					radius2 = gheight / 8
					for i = 0 to maxLasers cycle
						if laserDist( i ) = oldRadius2 then
							laserDist( i ) = radius2
						endif
					repeat
					if xres = maxxres then
						if yres = maxyres then
							isMaxResolution = true
							fullscreen = true
						else
							fullscreen = false
						endif
					else
						fullscreen = false
					endif
				endif
			endif
			frames = 0
			oldTime = time
		endif
		totalFrames = totalFrames + 1
	repeat
	x = 0
	y = 0
	x2 = 0
	y2 = 0
	oldX = radius * cos( angle - gap )
	oldX = centerX + oldX
	oldY = radius * sin( angle - gap )
	oldY = centerY + oldY
	oldX2 = radius2 * cos( angle - gap )
	oldX2 = centerX2 + oldX2
	oldY2 = radius2 * sin( angle - gap )
	oldY2 = centerY2 + oldY2
	cls2
endproc

def fn lerp( a, b, c )
	result = a + c * ( b - a )
=result
